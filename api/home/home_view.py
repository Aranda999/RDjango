from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib.auth import update_session_auth_hash, logout
from django.contrib import messages
from api.models import SalaJuntas, Reservacion,Area,Invitado,ReservacionInvitado
from django.http import JsonResponse
from datetime import datetime
import json
from api.filters import ReservacionFilter
from datetime import timedelta
from django.utils import timezone
from django.core.mail import send_mail

@login_required (login_url= 'login')
def Home(request):
    if request.user.is_superuser:
        template_view = "home-user.html"
        return render(request, template_name=template_view)
    else:
        return redirect("homeuser")

@login_required
def HomeUser(request):
    if request.method == 'POST':
        nueva_contrasena = request.POST.get('nuevaContrasena')
        confirmar_contrasena = request.POST.get('confirmarContrasena')

        # Verificar si las contrase√±as coinciden
        if nueva_contrasena != confirmar_contrasena:
            # Mensaje de error que se mostrar√° en el modal
            messages.error(request, "Las contrase√±as no coinciden.")
            return render(request, 'home-user.html')  # Mantener el modal abierto

        # Si las contrase√±as coinciden, cambiar la contrase√±a del usuario
        user = request.user
        user.set_password(nueva_contrasena)
        user.save()

        # Actualizar la sesi√≥n para que no se cierre despu√©s de cambiar la contrase√±a
        update_session_auth_hash(request, user)

        # Cerrar sesi√≥n del usuario
        logout(request)

        # Mensaje de √©xito y redirigir al login
        messages.success(request, "Contrase√±a cambiada exitosamente. Por favor, vuelve a iniciar sesi√≥n.")
        return redirect('login')  # Redirige al login despu√©s de cerrar sesi√≥n

    # Si no es un POST, solo se muestra el formulario
    return render(request, 'home-user.html')


@login_required
def Reservation(request):
    reservaciones = Reservacion.objects.filter(usuario=request.user)
    areas = Area.objects.prefetch_related('invitados').all()  # Cargar √°reas y sus invitados
    salas = SalaJuntas.objects.all()

    fecha = request.GET.get('fecha')
    if fecha == 'actuales_y_futuras':
        reservaciones = reservaciones.filter(fecha__gte=timezone.now().date())

    # Aplicar filtro a las reservaciones
    myFilter = ReservacionFilter(request.GET, queryset=reservaciones)
    reservaciones = myFilter.qs

    # Determinar si una reservaci√≥n es editable
    for reservacion in reservaciones:
        hora_inicio = datetime.combine(reservacion.fecha, reservacion.hora_inicio)
        reservacion.editable = hora_inicio - datetime.now() >= timedelta(hours=1)

    if request.method == 'POST':
        # Obtener datos del formulario
        fecha_reservacion = request.POST.get('fechaReservacion')
        hora_inicio_str = request.POST.get('horaInicio')
        hora_final_str = request.POST.get('horaFinal')
        sala_id = request.POST.get('salaJuntas')
        evento = request.POST.get('evento')
        comentarios = request.POST.get('comentarios', '')
        enviar_correo = request.POST.get('notificarReserva') == "on"
        destinatarios_ids = request.POST.get('destinatariosSeleccionados', "")

        # Validar que los destinatarios se est√°n recibiendo correctamente
        print(f"Destinatarios recibidos en la solicitud: {destinatarios_ids}")  # Depuraci√≥n en consola

        destinatarios_ids = destinatarios_ids.split(",") if destinatarios_ids else []  # Convertir en lista

        try:
            # Convertir fecha y hora al formato correcto
            fecha_reservacion = datetime.strptime(fecha_reservacion, '%Y-%m-%d').date()
            hora_inicio = datetime.strptime(hora_inicio_str, '%H:%M').time()
            hora_final = datetime.strptime(hora_final_str, '%H:%M').time()
        except ValueError:
            messages.error(request, "Fecha o hora inv√°lida. Aseg√∫rate de usar el formato correcto.")
            return redirect('reservation')

        sala = SalaJuntas.objects.get(id_sala=sala_id)

        # Guardar la nueva reservaci√≥n
        nueva_reservacion = Reservacion.objects.create(
            evento=evento,
            comentarios=comentarios,
            fecha=fecha_reservacion,
            hora_inicio=hora_inicio,
            hora_final=hora_final,
            sala=sala,
            usuario=request.user,
            enviar_correo=enviar_correo
        )

        # Guardar m√∫ltiples destinatarios solo si hay datos v√°lidos
        if destinatarios_ids and destinatarios_ids[0] != "":
            invitados_a_guardar = [
                ReservacionInvitado(reservacion=nueva_reservacion, invitado=Invitado.objects.get(id_invitado=int(destinatario_id)))
                for destinatario_id in destinatarios_ids if destinatario_id.strip().isdigit()
            ]
            
            # Inserci√≥n masiva en la base de datos
            ReservacionInvitado.objects.bulk_create(invitados_a_guardar)


        # Enviar correos si la opci√≥n de notificaci√≥n est√° activada
            if enviar_correo and destinatarios_ids:
                destinatarios_correo = [invitado.correo for invitado in Invitado.objects.filter(id_invitado__in=destinatarios_ids)]
                if destinatarios_correo:
                    subject = f"Confirmaci√≥n de Reservaci√≥n: {evento}"
                    message = (
                        f"La reservaci√≥n para '{evento}' ha sido realizada.\n"
                        f"üìç *Sala:* {sala}\n"  # Agregar la sala de reservaci√≥n
                        f"üìÖ *Fecha:* {fecha_reservacion}\n"
                        f"‚è∞ *Horario:* {hora_inicio} - {hora_final}"
                    )
                    send_mail(subject, message, 'noreply@miapp.com', destinatarios_correo)

            messages.success(request, f"Reservaci√≥n realizada con √©xito para '{evento}'.")


        return redirect('reservation')

    return render(request, "reservation.html", {
        'salas': salas,
        'reservaciones': reservaciones,
        'areas': areas,  # Se env√≠an las √°reas al template
        'myFilter': myFilter,
        'today': timezone.now().date()
    })


def get_ocupados(request):
    try:
        sala_id = request.GET.get('sala_id')
        fecha = request.GET.get('fecha')
        reservacion_id = request.GET.get('reservacion_id')
        if reservacion_id:
            ocupados = Reservacion.objects.filter(sala_id=sala_id, fecha=fecha).exclude(id_reservacion=reservacion_id).values('hora_inicio', 'hora_final')
        else:
            ocupados = Reservacion.objects.filter(sala_id=sala_id, fecha=fecha).values('hora_inicio', 'hora_final')
        return JsonResponse(list(ocupados), safe=False)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)